USING: combinators.extras kernel math math.combinatorics
math.matrices math.parser multiline io peg.ebnf sequences
splitting ;
IN: 2016.22

! Grid Computing
! part 1: count viable pairs
! part 2: minimum number of moves

EBNF: (parse) [=[
    n = [0-9]+ => [[ dec> ]]
    node = "/dev/grid/node-x"~ n "-y"~ n (" "+)~
    size = n ("T" " "+)~
    percent = n "%"~
    line = node size~ size size percent~
]=]

: parse ( seq -- seq ) 2 tail [ (parse) ] map ;

: viable? ( avail used -- ? ) [ >= ] keep 0 > and ;

: part-1 ( seq -- n )
    [ rest ] map 2 0 [
        concat first4 roll [ viable? 1 0 ? ] 2bi@ + +
    ] reduce-combinations ;

: print-grid ( seq -- )
    [
        [ first ] map flip [ supremum 1 + ] map
        first2 <zero-matrix>
    ] keep [
        first2 {
            { [ zero? ] [ "_" ] }
            { [ 100 < ] [ "." ] }
            [ drop "#" ]
        } cond-case swap pick matrix-set-nth
    ] each flip [ " " join ] map join-lines print ;

/*
O....................................G
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
......................................
............L#########################
......................................
......................................
......................................
......................................
...................................E..
......................................
......................................
......................................

position of empty node (E): { 35 24 }
position left of the “wall” of unmovable nodes (L): { 12 19 }
position of the goal (G): { 37 0 }
position of the access node (O): { 0 0 }

move to the left of the “wall”:
    { 35 24 } { 12 19 } v- l1-norm = 28 steps
move to the goal:
    { 12 19 } { 37 0 } v- l1-norm = 44 steps
move goal to access node:
    { 36 0 } { 0 0 } v- l1-norm 5 * = 180 steps
sum: 252 steps
*/
